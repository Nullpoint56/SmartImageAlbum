services:
  # ───────────── Core Dependencies ─────────────

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: on-failure

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: on-failure

  postgres_app:
    image: postgres:15
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: image_service
    ports:
      - "5432:5432"
    volumes:
      - pgdata_app:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 5s
      timeout: 3s
      retries: 5

  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: on-failure

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    restart: on-failure

  # ───────────── App Services ─────────────

  api:
    build:
      context: ../
      dockerfile: src/services/backend_service/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      postgres_app:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      qdrant:
        condition: service_started
    environment:
      DB__URL: postgresql+asyncpg://app:apppass@postgres_app:5432/image_service
      LOGGER_LEVEL: DEBUG
      LOGGER_FILE_LOCATION: /app/logs/app.log
      OBJECT_STORE__ENDPOINT: minio:9000
      OBJECT_STORE__ACCESS_KEY: minioadmin
      OBJECT_STORE__SECRET_KEY: minioadmin
      OBJECT_STORE__SECURE: false
      OBJECT_STORE__BUCKET: uploads
      VECTOR_DB__HOST: qdrant
      VECTOR_DB__PORT: 6333
      VECTOR_DB__COLLECTION: images
      VECTOR_DB__TOP_K: 5
      VECTOR_DB__VECTOR_SIZE: 512
      ALEMBIC__DB_URL: postgresql://app:apppass@postgres_app:5432/image_service
      CELERY_BROKER_URL: redis://redis:6379/0
    volumes:
      - logs:/app/logs
    restart: on-failure

  worker:
    build:
      context: ../
      dockerfile: src/services/backend_worker_service/Dockerfile
    depends_on:
      postgres_app:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      DB__URL: postgresql://app:apppass@postgres_app:5432/image_service
      LOGGER_LEVEL: DEBUG
      LOGGER_FILE_LOCATION: /app/logs/worker.log
      OBJECT_STORE__ENDPOINT: minio:9000
      OBJECT_STORE__ACCESS_KEY: minioadmin
      OBJECT_STORE__SECRET_KEY: minioadmin
      OBJECT_STORE__SECURE: false
      OBJECT_STORE__BUCKET: uploads
      VECTOR_DB__HOST: qdrant
      VECTOR_DB__PORT: 6333
      VECTOR_DB__COLLECTION: images
      VECTOR_DB__TOP_K: 5
      VECTOR_DB__VECTOR_SIZE: 512
      EMBEDDER_CLIENT__BASE_URL: http://embedder:8001
    volumes:
      - logs:/app/logs
    restart: on-failure

  embedder:
    build:
      context: ../
      dockerfile: src/services/image_embedding_service/Dockerfile
    ports:
      - "8001:8001"
    environment:
      EMBEDDER__MODEL_NAME: openai/clip-vit-base-patch32
    restart: on-failure

volumes:
  pgdata_app:
  qdrant_data:
  minio_data:
  logs:
